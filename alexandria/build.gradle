// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

// Projects to be published to bintray
def PUBLISH_PROJECTS = ['zxing']

subprojects {
    repositories {
        jcenter()
    }

    version = '3.0.1'
    group = 'com.theeheng'
    apply plugin: 'android-sdk-manager'

    ext.androidBuildTools = '21.1.2'
    ext.androidTargetSdk = 21
    ext.zxingCore = 'com.google.zxing:core:3.2.0'

    if (PUBLISH_PROJECTS.contains(project.name)) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'

        project.ext.artifactId = project.name // Default to subproject name

        afterEvaluate {

            task sourceJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.srcDirs
            }

            publishing {
                publications {
                    // We need this check to cover Android Studio gradle sync
                    if (project.tasks.findByPath('bundleRelease') != null) {
                        maven(MavenPublication) {
                            artifact bundleRelease
                            artifactId project.artifactId

                            artifact sourceJar

                            pom.withXml {
                                // HACK to add dependencies to POM.
                                // When maven-publish can do this automatically for Android projects,
                                // remove this section.
                                def deps = asNode().appendNode('dependencies')

                                project.configurations.compile.allDependencies.each { dep ->
                                    def node = deps.appendNode('dependency')
                                    node.appendNode('groupId', dep.group)
                                    node.appendNode('artifactId', dep.name)
                                    node.appendNode('version', dep.version)
                                    node.appendNode('scope', 'compile')
                                }

                            }

                        }
                    }
                }
            }
        }
    }
}